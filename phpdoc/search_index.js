var search_data = {
    'index': {
        'searchIndex': ["gitapi","gitapi\\gitapi","gitapi\\gitcommand","gitapi\\gitruntimeexception","gitapi\\repository","gitapi\\gitapi::setbin","gitapi\\gitapi::getbin","gitapi\\gitapi::create","gitapi\\gitapi::open","gitapi\\gitapi::isrepository","gitapi\\gitcommand::run","gitapi\\repository::__construct","gitapi\\repository::setgitconsole","gitapi\\repository::getgitconsole","gitapi\\repository::createnew","gitapi\\repository::getrepositorypath","gitapi\\repository::setrepositorypath","gitapi\\repository::testgit","gitapi\\repository::run","gitapi\\repository::getcommitslist","gitapi\\repository::getcommitshistory","gitapi\\repository::getlastcommitinfos","gitapi\\repository::getcommitinfos","gitapi\\repository::getcommitchanges","gitapi\\repository::getcommiterslist","gitapi\\repository::getrecursivetree","gitapi\\repository::gettree","gitapi\\repository::getfilesinfo","gitapi\\repository::getraw","gitapi\\repository::isimagecontent","gitapi\\repository::getrawimagedata","gitapi\\repository::add","gitapi\\repository::commit","gitapi\\repository::cloneto","gitapi\\repository::clonefrom","gitapi\\repository::cloneremote","gitapi\\repository::clean","gitapi\\repository::createbranch","gitapi\\repository::deletebranch","gitapi\\repository::getbrancheslist","gitapi\\repository::getcurrentbranch","gitapi\\repository::checkout","gitapi\\repository::merge","gitapi\\repository::fetch","gitapi\\repository::gettagslist","gitapi\\repository::buildtagtarball","gitapi\\repository::buildtarball","gitapi\\repository::addtag","gitapi\\repository::push","gitapi\\repository::pull","gitapi\\repository::setdescription","gitapi\\repository::getdescription"],
        'info': [["GitApi","","GitApi.html","","",3],["GitApi","GitApi","GitApi\/GitApi.html","","Largely inspired from ",1],["GitCommand","GitApi","GitApi\/GitCommand.html"," < Command","Largely inspired from ",1],["GitRuntimeException","GitApi","GitApi\/GitRuntimeException.html"," < RuntimeException","",1],["Repository","GitApi","GitApi\/Repository.html","","Largely inspired from ",1],["GitApi::setBin","GitApi\\GitApi","GitApi\/GitApi.html#method_setBin","(string $path)","Sets git executable path",2],["GitApi::getBin","GitApi\\GitApi","GitApi\/GitApi.html#method_getBin","()","Gets git executable path",2],["GitApi::create","GitApi\\GitApi","GitApi\/GitApi.html#method_create","(string $repo_path, string $source = null)","Create a new git repository",2],["GitApi::open","GitApi\\GitApi","GitApi\/GitApi.html#method_open","(string $repo_path)","Open an existing git repository",2],["GitApi::isRepository","GitApi\\GitApi","GitApi\/GitApi.html#method_isRepository","(mixed $var)","Checks if a variable is an instance of GitRepo",2],["GitCommand::run","GitApi\\GitCommand","GitApi\/GitCommand.html#method_run","($command, $repository = null, $force = false)","Run a command in the git repository",2],["Repository::__construct","GitApi\\Repository","GitApi\/Repository.html#method___construct","($repository_path = null, $createNew = false, $_init = true)","Constructor",2],["Repository::setGitConsole","GitApi\\Repository","GitApi\/Repository.html#method_setGitConsole","(<a href=\"GitApi\/GitCommand.html\"><abbr title=\"GitApi\\GitCommand\">GitCommand<\/abbr><\/a> $console)","",2],["Repository::getGitConsole","GitApi\\Repository","GitApi\/Repository.html#method_getGitConsole","()","",2],["Repository::createNew","GitApi\\Repository","GitApi\/Repository.html#method_createNew","(string $repository_path, string $source = null)","Create a new git repository",2],["Repository::getRepositoryPath","GitApi\\Repository","GitApi\/Repository.html#method_getRepositoryPath","()","",2],["Repository::setRepositoryPath","GitApi\\Repository","GitApi\/Repository.html#method_setRepositoryPath","($repository_path, $createNew = false, $_init = true)","Set the repository's path",2],["Repository::testGit","GitApi\\Repository","GitApi\/Repository.html#method_testGit","()","Tests if git is installed",2],["Repository::run","GitApi\\Repository","GitApi\/Repository.html#method_run","(string $command)","Run a git command in the git repository",2],["Repository::getCommitsList","GitApi\\Repository","GitApi\/Repository.html#method_getCommitsList","()","",2],["Repository::getCommitsHistory","GitApi\\Repository","GitApi\/Repository.html#method_getCommitsHistory","()","",2],["Repository::getLastCommitInfos","GitApi\\Repository","GitApi\/Repository.html#method_getLastCommitInfos","($path = null)","",2],["Repository::getCommitInfos","GitApi\\Repository","GitApi\/Repository.html#method_getCommitInfos","($hash, $path = null)","",2],["Repository::getCommitChanges","GitApi\\Repository","GitApi\/Repository.html#method_getCommitChanges","($hash)","",2],["Repository::getCommitersList","GitApi\\Repository","GitApi\/Repository.html#method_getCommitersList","()","",2],["Repository::getRecursiveTree","GitApi\\Repository","GitApi\/Repository.html#method_getRecursiveTree","($scope = &#039;HEAD&#039;, $subdir = null)","",2],["Repository::getTree","GitApi\\Repository","GitApi\/Repository.html#method_getTree","($scope = &#039;HEAD&#039;, $subdir = null, $only_directories = null)","",2],["Repository::getFilesInfo","GitApi\\Repository","GitApi\/Repository.html#method_getFilesInfo","()","",2],["Repository::getRaw","GitApi\\Repository","GitApi\/Repository.html#method_getRaw","($object)","",2],["Repository::isImageContent","GitApi\\Repository","GitApi\/Repository.html#method_isImageContent","($content)","",2],["Repository::getRawImageData","GitApi\\Repository","GitApi\/Repository.html#method_getRawImageData","($content)","",2],["Repository::add","GitApi\\Repository","GitApi\/Repository.html#method_add","(mixed $files = &#039;*&#039;)","Runs a `git add` call",2],["Repository::commit","GitApi\\Repository","GitApi\/Repository.html#method_commit","(string $message = &#039;&#039;)","Runs a `git commit` call",2],["Repository::cloneTo","GitApi\\Repository","GitApi\/Repository.html#method_cloneTo","(string $target)","Runs a `git clone` call to clone the current repository",2],["Repository::cloneFrom","GitApi\\Repository","GitApi\/Repository.html#method_cloneFrom","(string $source)","Runs a `git clone` call to clone a different repository",2],["Repository::cloneRemote","GitApi\\Repository","GitApi\/Repository.html#method_cloneRemote","(string $source)","Runs a `git clone` call to clone a remote repository",2],["Repository::clean","GitApi\\Repository","GitApi\/Repository.html#method_clean","(bool $dirs = false)","Runs a `git clean` call",2],["Repository::createBranch","GitApi\\Repository","GitApi\/Repository.html#method_createBranch","(string $branch)","Runs a `git branch` call",2],["Repository::deleteBranch","GitApi\\Repository","GitApi\/Repository.html#method_deleteBranch","($branch, $force = false)","Runs a `git branch -[d|D]` call",2],["Repository::getBranchesList","GitApi\\Repository","GitApi\/Repository.html#method_getBranchesList","(bool $keep_asterisk = false)","Runs a `git branch` call",2],["Repository::getCurrentBranch","GitApi\\Repository","GitApi\/Repository.html#method_getCurrentBranch","(bool $keep_asterisk = false)","Returns name of active branch",2],["Repository::checkout","GitApi\\Repository","GitApi\/Repository.html#method_checkout","(string $branch)","Runs a `git checkout` call",2],["Repository::merge","GitApi\\Repository","GitApi\/Repository.html#method_merge","(string $branch)","Runs a `git merge` call",2],["Repository::fetch","GitApi\\Repository","GitApi\/Repository.html#method_fetch","()","Runs a git fetch on the current branch",2],["Repository::getTagsList","GitApi\\Repository","GitApi\/Repository.html#method_getTagsList","()","",2],["Repository::buildTagTarball","GitApi\\Repository","GitApi\/Repository.html#method_buildTagTarball","($tagname, $target_dir, $target_file = &#039;auto&#039;, $format = &#039;tar&#039;)","",2],["Repository::buildTarball","GitApi\\Repository","GitApi\/Repository.html#method_buildTarball","($target_dir, $target_file = &#039;latest&#039;, $format = &#039;tar&#039;, $scope = &#039;HEAD&#039;)","",2],["Repository::addTag","GitApi\\Repository","GitApi\/Repository.html#method_addTag","(string $tag, string $message = null)","Add a new tag on the current position",2],["Repository::push","GitApi\\Repository","GitApi\/Repository.html#method_push","(string $remote, string $branch)","Push specific branch to a remote",2],["Repository::pull","GitApi\\Repository","GitApi\/Repository.html#method_pull","(string $remote, string $branch)","Pull specific branch from remote",2],["Repository::setDescription","GitApi\\Repository","GitApi\/Repository.html#method_setDescription","(string $new)","Sets the project description.",2],["Repository::getDescription","GitApi\\Repository","GitApi\/Repository.html#method_getDescription","()","Gets the project description.",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']